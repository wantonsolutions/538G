q1)

Still working through this but hope is in sight. At the moment I have
gone through two examples. In both I defined enums for the named
types, and used an array of integers for the numeric types. I applied
the one-to one function to each of them, then constrained each by the
rules of the puzzle. In all cases I could not get an answer. I have
heard that there is some sample code to help me along though.

q2)

A)
After suggestions in class it is apparent that low must be greater
than or equal to high in some cases. Modification made on line 54

s.add(Or(low > high, And(0 <= low, low < high)))
-------------------------------------------------
s.add(Or(low >= high, And(0 <= low, low < high)))

B)
That did not make a difference to the output. Considering the breaking
point is mid > high, i have to assume that there is a rollover
happening during the low+high/2 computation.

I think this could be fixed by asserting that low+high > high
NVM (x + y)/2 == x/2 + y/2 without having rollover issues.

C)
This seemed to solve the problem, but now equality is causing mid <
high to fail. In the half case where the value is converged upon by
high == mid this fails, so the assert should be changed to mid <=
high.

I changed mid <= high and started getting a bug where mid < 0 failed
due to a roll over. I investigated and it seemed to be caused by the
modification I made in A). I reverted the change and all the
assertions passed.

Based on some chat from class I will search for more bugs.

It is entirely possible that high > len(arr) I will add a check for
that first. I wrote it out in C and it turns out that the operations
of assigning low = mid +1 nad high = mid -1 are being done in the
wrong places, so I swapped them.

Summary: I) (x + y)/2 caused a rollover issue when x + y was too
large. I modified it to x/2 + y/2 to correct the bug. II) In the edge
case where high = low/2 + high/2 such as when the key is in the last
index, mid < high fails. I changed the assert to mid <= high, and each
case was proven. the assignments of high = mid -1, and low - mid +1
were being done on the incorrect conditionals so I swapped them.
Summary of the source code can be found in binary_search.c

q3)

I wrote out functions for the two cases element-wise positive and
diagonally-dominant. In each of the cases a - c a counter example was
generated to show that the properties were not enough to ensure that
the matrix was positive definite. The following are the counter examples.

a) A is Symmetric and element-wise positive
    solve(And(symmetric(A), element_wise_positive(A),Not(positive_definite(A,x))))

    [   1   1   1   ]       [   1/8   ]
A = [   1   1   1   ]   X = [   1/2   ]
    [   1   1  1/2  ]       [  -1/2   ]

b) A is Symmetric and diagonally dominant
solve(And(symmetric(A), diagonally_dominant(A),Not(positive_definite(A,x))))

    [   3   1   1   ]       [   -1    ]
A = [ -1/2  3   1   ]   X = [  -1/2   ]
    [   1   1   3   ]       [   -1    ]

c) A is element-wise positive and diagonally dominant
solve(And(diagonally_dominant(A), element_wise_positive(A),Not(positive_definite(A,x))))

    [   1      1/4      5/8   ]       [   1/8   ]
A = [ 1/64      1     125/128 ]   X = [   1/2   ]
    [ 1/256  2039/2048  1     ]       [  -1/2   ]



q4)

a) There are a few different topics that I would like to delve into
during the course. Primarily I would like to tack concolic execution
onto the symbolic execution section. I plan on making use of it in my
project as you will see in section c). I also enjoyed reading about
Rosette in the analysis group and I think it would be fun to cover
some more SMT integrated languages.

b) I was totally unaware that ML was being used for verification
purposes. I'm not very exposed to ML so if that could be extend from
1 lecture to 2 it would make me happy.

c) Yes

    i) My proposal is to add an SMT solver to distributed systems
built in go. The goal of the project is to build a mechanism for
refined fuzz-testing. The idea is that I would collect statistics on
the control flow of the program. An SMT solver would sit at point
where messages are received. When a packet is received the SMT solver
will do a bit of symbolic execution to determine if a change could be
made to the packet which would result in a rarely executed control
path being executed. If so the change would be made to the packet in
order to perturb the system. In the case of a crash, the set of
manipulated packets would be given to the user.

   ii) I appreciate the brainstorming help, but I think what I need is
some more information on symbolic execution. I sent an email to Sam
Bayless about getting some extra background material in the field, but
an extra chat would be nice as well.

